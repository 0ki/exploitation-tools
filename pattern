#!/usr/bin/python
# (C) Kirils Solovjovs, 2017

import sys,string
from struct import pack

lower = string.ascii_lowercase
upper = string.ascii_uppercase
digits = string.digits

# create_pattern() by peternguyen
# https://github.com/peternguyen93/gdb_tools
def create_pattern(size):
	pattern = ''
	j = k = l = 0
	for i in xrange(0,size,3):
		if(l == len(digits)):
			l = 0
			k += 1
			if(k == len(lower)):
				k = 0
				j += 1
				if(j == len(upper)):
					j = 0
		pattern += upper[j]+lower[k]+digits[l]
		l += 1
	return pattern[:size]

if len(sys.argv) != 2:
	print "Usage: %s  <1000 | 0x35644134 | 0Aq1>" % sys.argv[0]
	print
	print "This script replaces both pattern_create.rb and pattern_offset.rb"
	quit()

# This script does align words!
if sys.argv[1].isdigit():
	print 'Pattern: %s' % create_pattern(int(sys.argv[1]))
elif sys.argv[1][0:2].lower() == "0x":
	pat = create_pattern(20283)
	p1 = pat.find(pack('<I',int(sys.argv[1][2:],16)))
	if p1 == -1:
		p1 = pat.find(pack('>I',int(sys.argv[1][2:],16)))
	if p1 == -1:
		print "Not found."
	else:
		print 'Found at offset: %i' % p1
else:
	p2 = create_pattern(20283).find(sys.argv[1])
	if p2 == -1:
		print "Not found."
	else:
		print 'Found at offset: %i' % p2
